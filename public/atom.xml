<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[thoughts_on_rails]]></title>
  <link href="http://www.thoughtsonrails.com/atom.xml" rel="self"/>
  <link href="http://www.thoughtsonrails.com/"/>
  <updated>2012-12-02T15:41:28-05:00</updated>
  <id>http://www.thoughtsonrails.com/</id>
  <author>
    <name><![CDATA[James Martin]]></name>
    <email><![CDATA[james@thoughtsonrails.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[apps for rails developers]]></title>
    <link href="http://www.thoughtsonrails.com/apps-for-rails-developers/"/>
    <updated>2012-12-02T13:54:00-05:00</updated>
    <id>http://www.thoughtsonrails.com/apps-for-rails-developers</id>
    <content type="html"><![CDATA[<p>The App Store is full of useful mobile apps for developers&#8230; of mobile apps.  Though Rails developers have a bit less to choose from, there are some great apps out there for us as well.  Here are a few that I&#8217;m using right now.</p>

<!--more-->


<h3><a href="https://itunes.apple.com/us/app/nezumi-for-heroku/id346715875?mt=8">Nezumi</a></h3>

<p><img class="left" src="https://s3.amazonaws.com/thoughts_on_rails/nezumi_iphone.jpeg" width="240" height="180" title="Nezumi" ></p>

<p>Most Rails developers love Heroku, and for good reason.  Almost every Rails app I&#8217;ve ever worked on has been hosted, at least partially, on the platform.  When it comes to Heroku management apps, Nezumi is by far the best currently available.</p>

<p>With Nezumi you can read logs, set environment variables, scale dynos, monitor processes, and more.  You even have access to the console right inside of the app, and it&#8217;s useable.  This feature alone makes it the most useful app on my phone for development.</p>

<p>If you have apps on Heroku, and you own an iPhone, you should probably have Nezumi.  The only down side is the price: $9.99.  It&#8217;s a bit more than most people expect to pay for mobile apps these days, but it&#8217;s worth every penny.</p>

<hr />

<h3><a href="https://itunes.apple.com/us/app/pivotal-tracker/id444623375?mt=8">Pivotal Tracker</a></h3>

<p><img class="left" src="https://s3.amazonaws.com/thoughts_on_rails/pivotal_tracker_iphone.jpeg" width="240" height="180" title="Pivotal Tracker" ></p>

<p>We use Pivotal Tracker at work, and I use it on almost all of my personal projects.  The app allows you to do pretty much everything you can do with the web application.  I find it most useful for putting in new stories as I think of them, usually when I&#8217;m away from my laptop.</p>

<p>The iPhone and iPad versions offer similar functionality, though the iPad does benefit from the extra screen real estate.  Whereas with the iPhone app each panel is inside of it&#8217;s own tab, the iPad version can display multiple tabs at once.</p>

<p>Though I wouldn&#8217;t consider it a critical part of my every day workflow, I definitely recommend picking this one up.  It&#8217;s free on the App Store, and can be useful when you can&#8217;t be near a computer.</p>

<hr />

<h3><a href="https://itunes.apple.com/us/app/stackwise-for-iphone-stack/id556299075?mt=8">Stackwise</a></h3>

<p><img class="left" src="https://s3.amazonaws.com/thoughts_on_rails/stackwise.jpeg" width="240" height="180" title="Stackwise" ></p>

<p>Stack Overflow is one of the best resources out there for developers.  There are quite a few apps that attempt to make browsing the site&#8217;s content easier on a phone.  If I had to pick one, it&#8217;d be Stackwise.</p>

<p>Stackwise offers content from all 177 Stack Exchange sites.  Stack Overflow, Super User, Server Fault, all of them.  It doesn&#8217;t offer many advanced features, but it does excel in one area: finding answers.</p>

<p>You&#8217;re given the option of searching by tag or title keywords.  Finding answers is quick and easy, though the displayed code is often wrapped and distorted, making it hard to read.  Flipping over in to landscape mode often solves this problem.</p>

<p>At $3.99, I find this app worth picking up if you&#8217;re someone who spends a lot of time browsing Stack Exchange&#8217;s sites on your phone and you want a better mobile interface.  For anyone else, it probably isn&#8217;t worth the money.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[polymorphic associations with active record]]></title>
    <link href="http://www.thoughtsonrails.com/polymorphic-associations-with-active-record/"/>
    <updated>2012-12-01T12:01:00-05:00</updated>
    <id>http://www.thoughtsonrails.com/polymorphic-associations-with-active-record</id>
    <content type="html"><![CDATA[<p>Model associations are one of the things that every new Ruby on Rails developer must understand in order to effectively use the framework.  The concept behind these relationships is rather simple, and most people have little trouble grasping it once introduced.  One of the sticking points (for me, at least) was polymorphic associations, or associations where a single model can belong to multiple types of other models.</p>

<!--more-->


<p>Like just about everything else in the Ruby on Rails world, there is a &#8216;Rails way&#8217; to do polymorphic associations.  This involves leveraging the support that is built in to Rails&#8217; standard ORM, Active Record.  You set up a polymorphic association in very much the same way that you would a typical has_many.</p>

<figure class='code'><figcaption><span>app/models/comment.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="n">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="ss">:commentable</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/profile.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="ss">:commentable</span>
</span><span class='line'><span class="c1">#...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>migration  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateComments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:comments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="n">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="c1">#...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that all we&#8217;re really doing is passing a couple of parameters to the :has_many and :belongs_to methods.  The migration will generate two columns on the Comments table, &#8216;commentable_id&#8217; and &#8216;commentable_type&#8217;.  Behind the scenes, Active Record will wire up all of the helper methods that you&#8217;re used to using with normal associations.</p>

<figure class='code'><figcaption><span>irb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">comments</span>  <span class="c1"># get all comments for a post</span>
</span><span class='line'><span class="n">profile</span><span class="o">.</span><span class="n">comments</span> <span class="c1"># get all comments for a profile</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span> <span class="c1"># create a new comment for a post</span>
</span><span class='line'><span class="n">profile</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span> <span class="c1"># create a new comment for a profile</span>
</span><span class='line'>
</span><span class='line'><span class="n">comment</span><span class="o">.</span><span class="n">commentable</span> <span class="c1"># get the parent of a comment</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it, both posts and profiles can have their own comments.  The obvious limitation here is that, since we&#8217;re only setting a single foreign key and type, a comment can only belong to one other object at a time.  This may be the desired functionality for some use cases.  Sometimes, however, you&#8217;ll want to be able to associate a single model with multiple other models of different types at the same time.  We&#8217;ll look at how to handle something like that in a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[creating plugins for octopress]]></title>
    <link href="http://www.thoughtsonrails.com/creating-plugins-for-octopress/"/>
    <updated>2012-11-26T10:32:00-05:00</updated>
    <id>http://www.thoughtsonrails.com/creating-plugins-for-octopress</id>
    <content type="html"><![CDATA[<p>Octopress comes with quite a few plugins out of the box, covering everything from categories to video tags.  Plugins are easy to create and can be used to extend Octopress in a variety of ways.  Today we&#8217;ll learn how to extend the Liquid templating system with new tags of our own.</p>

<!--more-->


<p>For this example we will be creating a tag that allows users to easily embed images hosted on Amazon&#8217;s S3 service.  To begin, create a plain Ruby file called &#8216;s3_image_tag.rb&#8217;.</p>

<ul>
<li>Define a new Liquid::Tag subclass within the Jekyll module</li>
</ul>


<figure class='code'><figcaption><span>s3_image_tag.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">S3ImageTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>    <span class="c1"># our code will go here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All Liquid tags are defined as classes inheriting from Liquid::Tag.  Liquid expects this class to respond to a #render message, which we will implement shortly.</p>

<ul>
<li>Grab parameters passed in to the tag</li>
</ul>


<figure class='code'><figcaption><span>s3_image_tag.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'>  <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="vi">@text</span> <span class="o">=~</span> <span class="sr">/(\w+\.\w+)(\sbucket:)?(\w*)/i</span>
</span><span class='line'>  <span class="vi">@file_name</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>  <span class="vi">@bucket_name</span> <span class="o">=</span> <span class="vg">$3</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="no">Jekyll</span><span class="o">.</span><span class="n">configuration</span><span class="p">({})</span><span class="o">[</span><span class="s1">&#39;aws_bucket&#39;</span><span class="o">]</span> <span class="p">:</span> <span class="vg">$3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that Liquid will call our initialize method with three parameters: the tag name, the text within the tag itself, and a token.  The part we care about is the text.</p>

<p>First we call super to allow our superclass to perform any necessary initialization.  Next, we grab the passed in text as an instance variable and strip it of leading/trailing whitespace.  We then match the stripped text against a regex to capture the pieces we need.  In this case, we need the file name and the optional bucket parameter.  If the bucket parameter is not supplied we pull a default from the Jekyll configuration loaded from &#8216;_config.yml&#8217;.</p>

<ul>
<li>Define the #render method</li>
</ul>


<figure class='code'><figcaption><span>s3_image_tag.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@file_name</span> <span class="o">&amp;&amp;</span> <span class="vi">@bucket_name</span>
</span><span class='line'>    <span class="s2">&quot;&lt;img src=&#39;https://s3.amazonaws.com/</span><span class="si">#{</span><span class="vi">@bucket_name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="vi">@file_name</span><span class="si">}</span><span class="s2">&#39;&gt;&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;Error processing input.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we just check to make sure we have a @file_name and @bucket_name, and if so construct the HTML tag for the desired image.  If either parameter is missing, we return a simple error message.</p>

<ul>
<li>Register the new tag</li>
</ul>


<figure class='code'><figcaption><span>s3_image_tag.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;s3_image&#39;</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">S3ImageTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We send the .register_tag message to Liquid::Template, passing in the name of our tag and the class which represents it.  The new tag is now ready to be used in our templates.</p>

<ul>
<li><p>Add s3_image_tag.rb to the &#8216;/plugins&#8217; directory in your blog project.  Octopress automatically loads all plugins defined within it&#8217;s &#8216;plugins&#8217; subdirectory.</p></li>
<li><p>Define a default bucket in &#8216;_config.yml&#8217;</p></li>
</ul>


<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># ----------------------- #</span>
</span><span class='line'><span class="c1">#   3rd Party Settings    #</span>
</span><span class='line'><span class="c1"># ----------------------- #</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Amazon S3 Images</span>
</span><span class='line'><span class="l-Scalar-Plain">aws_bucket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">thoughts_on_rails</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the new tag in your templates</li>
</ul>


<figure class='code'><figcaption><span>_posts/2012-11-27-foo.markdown  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Here is an image:  {% s3_image foo.jpeg bucket:bar %}
</span></code></pre></td></tr></table></div></figure>


<p>You can find the full example code on my <a href="http://github.com/jmartin2683/s3_image_tag">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise and omniauth]]></title>
    <link href="http://www.thoughtsonrails.com/devise-and-omniauth/"/>
    <updated>2012-11-23T21:36:00-05:00</updated>
    <id>http://www.thoughtsonrails.com/devise-and-omniauth</id>
    <content type="html"><![CDATA[<p>One of the great things about <a href="https://github.com/plataformatec/devise">Devise</a> is how easy it is to add <a href="https://github.com/intridea/omniauth">Omniauth</a> support.  Omniauth is a library that standardizes authentication for a wide variety of services.  Services are supported via strategies, which are implemented as Rack middleware and distributed as gems.</p>

<p>You&#8217;ll need to have Devise set up with a User model in order to begin.  You can find instructions <a href="https://github.com/plataformatec/devise#getting-started">here</a> if necessary.  You&#8217;re also going to need to get signed up with whatever provider you choose to use.  Once you&#8217;re registered and have your credentials, you can actually get to work.</p>

<!--more-->


<ul>
<li>Add the strategy gem to your Gemfile</li>
</ul>


<figure class='code'><figcaption><span>/Gemfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-github&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is an established convention when it comes to naming the strategy gems, where the format is &#8220;omniauth-#{provider}&#8221;.</p>

<ul>
<li>Add the Devise option :omniauthable to your User model</li>
</ul>


<figure class='code'><figcaption><span>app/models/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span> <span class="ss">:omniauthable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit the Devise config file with your credentials</li>
</ul>


<figure class='code'><figcaption><span>/config/initializers/devise.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">omniauth</span> <span class="ss">:github</span><span class="p">,</span> <span class="s1">&#39;APP_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;APP_SECRET&#39;</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="s1">&#39;user,public_repo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you&#8217;ll probably want to store those credentials somewhere more secure, like an environment variable or another config file that isn&#8217;t checked in to version control.</p>

<ul>
<li>Generate a migration to add the provider and uid columns to the User model</li>
</ul>


<figure class='code'><figcaption><span>command line </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g migration AddOauthToUsers provider:string, uid:string
</span><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You&#8217;ll want to be able to mass-assign the provider and uid</li>
</ul>


<figure class='code'><figcaption><span>app/models/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span><span class="p">,</span> <span class="ss">:remember_me</span><span class="p">,</span> <span class="ss">:provider</span><span class="p">,</span> <span class="ss">:uid</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Next we&#8217;re going to need a controller action and route to handle the callback from the provider</li>
</ul>


<figure class='code'><figcaption><span>/app/controllers/omniauth_callbacks_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">OmniauthCallbacksController</span> <span class="o">&lt;</span> <span class="no">Devise</span><span class="o">::</span><span class="no">OmniauthCallbacksController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">github</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_for_oauth</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s2">&quot;omniauth.auth&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">persisted?</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span> <span class="s2">&quot;devise.omniauth_callbacks.success&quot;</span><span class="p">,</span> <span class="ss">:kind</span> <span class="o">=&gt;</span> <span class="s2">&quot;Github&quot;</span>
</span><span class='line'>      <span class="n">sign_in_and_redirect</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:event</span> <span class="o">=&gt;</span> <span class="ss">:authentication</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="s2">&quot;devise.github_data&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s2">&quot;omniauth.auth&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">new_user_registration_url</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#devise_for :users</span>
</span><span class='line'><span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:controllers</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:omniauth_callbacks</span> <span class="o">=&gt;</span> <span class="s2">&quot;omniauth_callbacks&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this controller inherits from Devise::OmniauthCallbacksController.  All we need to do is implement a method with the name of the strategy we are responding to.  Within this method, we call a class method on the User model (which we&#8217;ll define in a moment) that will find or create a User from the API response.</p>

<ul>
<li>Define Authentication::ActiveRecordHelpers and include it in User</li>
</ul>


<figure class='code'><figcaption><span>/app/domain/authentication/active_record_helpers.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Authentication</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ActiveRecordHelpers</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find_for_oauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>        <span class="n">record</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">provider</span><span class="p">:</span> <span class="n">auth</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span> <span class="n">uid</span><span class="p">:</span> <span class="n">auth</span><span class="o">.</span><span class="n">uid</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>        <span class="n">record</span> <span class="o">||</span> <span class="n">create</span><span class="p">(</span><span class="n">provider</span><span class="p">:</span> <span class="n">auth</span><span class="o">.</span><span class="n">provider</span><span class="p">,</span> <span class="n">uid</span><span class="p">:</span> <span class="n">auth</span><span class="o">.</span><span class="n">uid</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="n">auth</span><span class="o">.</span><span class="n">info</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">:</span> <span class="no">Devise</span><span class="o">.</span><span class="n">friendly_token</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/app/models/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:password_confirmation</span><span class="p">,</span> <span class="ss">:remember_me</span><span class="p">,</span> <span class="ss">:provider</span><span class="p">,</span> <span class="ss">:uid</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Authentication</span><span class="o">::</span><span class="no">ActiveRecordHelpers</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Finally, provide a sign in link</li>
</ul>


<figure class='code'><figcaption><span>view  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">link_to</span> <span class="s1">&#39;Sign in with Github&#39;</span><span class="p">,</span> <span class="n">user_omniauth_authorize_path</span><span class="p">(</span><span class="ss">:github</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all there is to it.  The first time you click on the link you will be redirected to the provider to authenticate, and a new User database record will be created during the callback.  For subsequent logins, the user is just retrieved from the database.</p>

<p>One thing to watch out for is the callback URL specified in the provider&#8217;s application configuration.  You may have to set this to &#8216;http://localhost:3000&#8217; for development purposes.  For Github, this setting is located on the account management page under &#8216;applications&#8217;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[getting started with octopress]]></title>
    <link href="http://www.thoughtsonrails.com/getting-started-with-octopress/"/>
    <updated>2012-11-23T00:05:00-05:00</updated>
    <id>http://www.thoughtsonrails.com/getting-started-with-octopress</id>
    <content type="html"><![CDATA[<p>Welcome to my blog, thoughts_on_rails.  I plan to put all sorts of useful stuff here, but we have to start somewhere.  Where better than the blog itself?  So, here&#8217;s my basic guide to setting up a blog just like this one.</p>

<p>This blog uses a really cool little gem called <a href="http://www.octopress.org/">Octopress</a> created by <a href="http://brandonmathis.com/">Brandon Mathis</a>.  It&#8217;s written in Ruby, based on <a href="http://github.com/mojombo/jekyll">Jekyll</a>, and has absolutely nothing at all to do with Rails.  I chose to use Octopress for this blog because of the git-based workflow and easy setup on Heroku.  Here are the basic steps to get up and running, assuming you have a working install of Ruby 1.9.3.</p>

<!--more-->


<ul>
<li>Clone the project from Github</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install bundler (if you don&#8217;t already have it) and bundle</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the default theme</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deploy the skeleton app to Heroku</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install heroku
</span><span class='line'>heroku create
</span><span class='line'>rake generate
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'initial commit'
</span><span class='line'>git push heroku master
</span><span class='line'>heroku apps:rename your-new-name --app original-app-name</span></code></pre></td></tr></table></div></figure>


<p>This will create the app on Heroku and push up the skeleton you&#8217;ve generated.  The last command is optional and will rename the app to something more memorable than the Heroku default.</p>

<ul>
<li>Set up the basics in _config.yml</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://www.thoughtsonrails.com</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">thoughts_on_rails</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">a blog about rails and what not</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">James Martin</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://google.com/search</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">a blog about ruby, rails, and everything that comes with them</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Make some changes to the templates</li>
</ul>


<p>The templates are pretty self-explanatory, and can be found in the &#8216;source/<em>layouts&#8217; &amp; &#8216;source/</em>includes&#8217; directories.  Sass styles are located in the &#8216;sass&#8217; directory.</p>

<ul>
<li>Check out the results locally</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>The blog will be hosted locally on port 4000.</p>

<ul>
<li>Create a new post</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['hello world']</span></code></pre></td></tr></table></div></figure>


<p>This will create a file called &#8216;YYYY-MM-DD-hello-world.markdown&#8217; in &#8216;source/_posts&#8217;.  This is where you will create the content of the post itself.  The posts are (by default) written in Markdown format.  In case your not familiar, here are <a href="http://daringfireball.net/projects/markdown/basics">the basics</a>.</p>

<ul>
<li>Commit everything and push it back up</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'first post'
</span><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s all there is to it.  You can read the <a href="http://octopress.org/docs/">docs</a> to learn more.  You can also check out the complete source for this blog on <a href="https://github.com/jmartin2683/thoughts_on_rails">Github</a>.</p>
]]></content>
  </entry>
  
</feed>
